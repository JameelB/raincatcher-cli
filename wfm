#!/bin/bash

RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
NC='\033[0m' # No Color

BASE_REPO="git@github.com:feedhenry-staff"

WFM_CLI_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
WFM_DIR="$WFM_CLI_DIR/.."

MONGO_DIR="$WFM_DIR/mongo"
MONGO_DATA="$MONGO_DIR/data"
MONGO_LOG="$MONGO_DIR/mongodb.log"
MONGO_PID="$MONGO_DIR/mongodb.pid"

APPS="wfm-cloud wfm-auth wfm-mobile wfm-portal"
MODULES="wfm-appform wfm-component-signature wfm-mediator wfm-risk-assessment wfm-sync wfm-template-build wfm-user wfm-vehicle-inspection wfm-workflow wfm-workorder"

APPS_DIR="$WFM_DIR"
MODULES_DIR="$WFM_DIR/modules"

echoHeader () {
  echo
  echo -e "${YELLOW}################################################################################${NC}"
  echo -e "${GREEN}${1}${NC}"
  echo -e "${YELLOW}################################################################################${NC}"
}

pullApps () {
  for D in $APPS; do
    cd "$APPS_DIR/$D"
    echoHeader "Pulling: $D"
    git pull
  done
}

pullModules () {
  ls "$MODULES_DIR/"
  for D in $MODULES_DIR/*; do
    cd $D
    echoHeader "Pulling: $D"
    git pull
  done
}

linkApps () {
  for D in $APPS; do
    cd "$APPS_DIR/$D"
    echoHeader "Linking: $D"
    linkToModules
  done
}

linkToModules () {
  MODULES=$(grep fh-wfm package.json | cut -d':' -f1 | tr -d ' "' | sed 's/fh-//')
  for M in $MODULES; do
    npm link ../modules/$M
  done
}

cleanApps () {
  for D in $APPS; do
    cd "$APPS_DIR/$D"
    echoHeader "Cleaning: $D"
    rm -rf node_modules
  done
}

installApps () {
  for D in $APPS; do
    cd "$APPS_DIR/$D"
    echoHeader "Installing: $D"
    npm install
  done
}

installModules () {
  for D in $MODULES; do
    cd "$MODULES_DIR/$D"
    echoHeader "Installing: $D"
    npm install
  done
}


cloneApps () {
  cd "$APPS_DIR"
  for D in $APPS; do
    echoHeader "Cloning: $D"
    git clone "$BASE_REPO/${D}.git"
  done
}

cloneModules () {
  if [ ! -d $MODULES_DIR ]; then
    mkdir $MODULES_DIR
  fi
  cd "$MODULES_DIR"
  for D in $MODULES; do
    echoHeader "Cloning: $D"
    git clone "$BASE_REPO/${D}.git"
  done
}

statusApps() {
  for D in $APPS; do
    cd "$APPS_DIR/$D"
    STATUS="$(git status -s)"
    if [ -n "$STATUS" ]; then
      STATUS="$(git status -s -b)"
      echoHeader "Status: $D"
      echo "$STATUS"
    fi
  done
}

statusModules () {
  for D in $MODULES_DIR/*; do
    cd $D
    STATUS="$(git status -s)"
    if [ -n "$STATUS" ]; then
      STATUS="$(git status -s -b)"
      echoHeader "Status: $D"
      echo "$STATUS"
    fi
  done
}

status () {
  statusApps
  statusModules
}

diff () {
  for D in $APPS; do
    cd "$APPS_DIR/$D"
    DIFF="$(git diff --color)"
    if [ -n "$DIFF" ]; then
      echoHeader "Diff: $D"
      echo "$DIFF"
    fi
  done

  for D in $MODULES_DIR/*; do
    cd $D
    DIFF="$(git diff --color)"
    if [ -n "$DIFF" ]; then
      echoHeader "Diff: $D"
      echo "$DIFF"
    fi
  done
}

mongo () {
  if [ ! -d $MONGO_DIR ]; then
    mkdir $MONGO_DIR
  fi
  if [ ! -d "$MONGO_DATA" ]; then
    mkdir $MONGO_DATA
  fi
  PID=`ps x | grep -v grep | grep "mongod" | grep $MONGO_DATA |awk '{ print $1 }'`
  case $1 in
    start)
    if [ ! -z $PID ]; then
      echo "Mongo is already running. pid: $PID"
    else
      mongod --dbpath $MONGO_DATA --logpath ${MONGO_LOG} --fork --logappend
    fi
    ;;
    stop)
    if [ -z $PID ]; then
      echo "Mongo is already stopped."
    else
      echo "Mongo stopping. pid: $PID"
      kill $PID
    fi
    ;;
    status)
    if [ ! -z $PID ]; then
      echo "Mongo is running. pid: $PID"
    else
      echo "Mongo is not running."
    fi
    ;;
    *)
    echo "Usage: wfm mongo {start|stop|status}"
  esac
  #
}

start () {
  cd $WFM_CLI_DIR
  WFM_PATH=$WFM_DIR tmuxinator wfm
}

ackWfm () {
  cd $WFM_DIR
  DIRS=$APPS
  for D in modules/*; do
    DIRS="$DIRS $D"
  done
  shift
  ack-grep "$@" $DIRS
}

case $1 in
  pull)
  pullApps
  pullModules
  ;;
  link)
  linkApps
  ;;
  clean)
  cleanApps
  ;;
  install)
  installApps
  installModules
  ;;
  clone)
  cloneApps
  cloneModules
  ;;
  status)
  status | less -r
  ;;
  diff)
  diff | less -r
  ;;
  path)
  echo "Script PATH is:"
  echo $WFM_CLI_DIR
  ;;
  mongo)
  mongo $2
  ;;
  start)
  start
  ;;
  grep)
  ackWfm $@
  ;;
  ack)
  ackWfm $@
  ;;
  *)
  echo "Usage: wfm {clone|status|diff|pull|clean|install|link|path|start|mongo|ack}"
esac
